import random

from aiogram import types
from misc import dp, bot
import sqlite3

import asyncio

from aiogram.dispatcher import FSMContext
from .sqlit import info_members,add_black,cheak_black
from aiogram.dispatcher.filters.state import State, StatesGroup


ADMIN_ID_1 = 494588959 #C–∞–Ω—è
ADMIN_ID_2 = 44520977 #–ö–æ–ª—è
ADMIN_ID_3 = 941730379 #–î–∂–µ–π—Å–æ–Ω
ADMIN_ID_4 = 678623761 # –ë–µ–∫–∏—Ä
ADMIN_ID_5 = 807911349 #–ë–ê–π–∑–∞—Ç
ADMIN_ID_6 = 1079844264

ADMIN_ID =[ADMIN_ID_1,ADMIN_ID_2,ADMIN_ID_3,ADMIN_ID_4, ADMIN_ID_5, ADMIN_ID_6]
PASS_ID = [ADMIN_ID_1,ADMIN_ID_2,ADMIN_ID_3,ADMIN_ID_4,ADMIN_ID_5, ADMIN_ID_6, 2110966819, 733308271]


passwd1 = random.randint(10000,100000)
passwd2 = random.randint(10000,100000)
passwd3 = random.randint(10000,100000)
passwd4 = random.randint(10000,100000)
passwd5 = random.randint(10000,100000)
passwd6 = random.randint(10000,100000)
passwd7 = random.randint(10000,100000)
passwd8 = random.randint(10000,100000)
passwd9 = random.randint(10000,100000)

def new_password1():
    global passwd1
    passwd1 = random.randint(10000,100000)

def new_password2():
    global passwd2
    passwd2 = random.randint(10000,100000)

def new_password3():
    global passwd3
    passwd3 = random.randint(10000,100000)

def new_password4():
    global passwd4
    passwd4 = random.randint(10000,100000)

def new_password5():
    global passwd5
    passwd5 = random.randint(10000,100000)

def new_password6():
    global passwd6
    passwd6 = random.randint(10000,100000)

def new_password7():
    global passwd7
    passwd7 = random.randint(10000,100000)

def new_password9():
    global passwd8
    passwd8 = random.randint(10000,100000)

def new_password9():
    global passwd9
    passwd9 = random.randint(10000,100000)


class reg1(StatesGroup):
    name1 = State()
    fname1 = State()

class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()

class black_dodik(StatesGroup):
    name1 = State()
    fname1 = State()

@dp.message_handler(commands=['pass1'],state='*')
async def pass1_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd1}")

@dp.message_handler(commands=['pass2'],state='*')
async def pass2_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd2}")

@dp.message_handler(commands=['pass3'],state='*')
async def pass3_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd3}")


@dp.message_handler(commands=['pass4'],state='*')
async def pass4_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd4}")

@dp.message_handler(commands=['pass5'],state='*')
async def pass5_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd5}")

@dp.message_handler(commands=['pass6'],state='*')
async def pass6_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd6}")


@dp.message_handler(commands=['pass7'],state='*')
async def pass7_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd7}")

@dp.message_handler(commands=['pass8'],state='*')
async def pass8_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd8}")

@dp.message_handler(commands=['pass9'],state='*')
async def pass9_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in PASS_ID:
        await message.answer(text=f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å {passwd9}")




@dp.message_handler(commands=['admin'],state='*')
async def admin_ka(message: types.Message,state: FSMContext):
    await state.finish()
    id = message.from_user.id
    if id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        bat_a = types.InlineKeyboardButton(text='–¢—Ä–∞—Ñ–∏–∫', callback_data='list_members')
        bat_c = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='write_message')
        bat_b = types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É', callback_data='baza')
        bat_d = types.InlineKeyboardButton(text='–£–¥–∞–ª–µ–Ω–∏–µ –µ–±–ª–∞–Ω–æ–≤', callback_data='black_user')

        markup.add(bat_a)
        markup.add(bat_c)
        markup.add(bat_b)
        markup.add(bat_d)

        await bot.send_message(message.chat.id,'–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',reply_markup=markup)



@dp.callback_query_handler(text='black_user')  #–£–î–ê–õ–ï–ù–ò–ï –î–û–î–ò–ö–û–í
async def delite_dodik(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        markap = types.InlineKeyboardMarkup()
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        markap.add(bat0)
        await bot.send_message(text = '–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–æ–¥–∏–∫–∞',chat_id=call.message.chat.id,reply_markup=markap)
        await black_dodik.name1.set()


@dp.message_handler(state=black_dodik.name1,content_types=['text','photo','video','video_note','voice']) # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    try:
        user_id = message.forward_from.id
        add_black(user_id)
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω ü©∏')

    except Exception as e:
        await message.answer('–£ –ø–∏–¥–æ—Ä–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç')



@dp.callback_query_handler(text='list_members')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def cheack_trafik(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        a = (info_members()) #–ö–û–õ–ò–ß–ï–°–¢–í–û –í–°–ï–• –ß–ï–õ–û–í
        await bot.send_message(call.message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {a[0]}\n'
                                                     f'–§–∏–Ω–∏—à–∏—Ä—Ä–æ–≤–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {a[1]}')

@dp.callback_query_handler(text='baza')
async def baza(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        a = open('server.db','rb')
        await bot.send_document(chat_id=call.message.chat.id, document=a)

########################  –†–∞—Å—Å—ã–ª–∫–∞  ################################

@dp.callback_query_handler(text='write_message')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                           reply_markup=murkap)
    await st_reg.step_q.set()


@dp.callback_query_handler(text='otemena',state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()



@dp.message_handler(state=st_reg.step_q,content_types=['text','photo','video','video_note','voice']) # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id,text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ',reply_markup=murkap)



# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@dp.callback_query_handler(text='add_but',state=st_reg.st_name) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id,text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot')
    await st_reg.step_regbutton.set()


@dp.message_handler(state=st_reg.step_regbutton,content_types=['text']) # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr3 = message.text.split('\n')
    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    massiv_text = []
    massiv_url = []

    for but in arr3:
        new_but = but.split('-')
        massiv_text.append(new_but[0][:-1])
        massiv_url.append(new_but[1][1:])
        bat9 = types.InlineKeyboardButton(text=new_but[0][:-1],url=new_but[1][1:])
        murkap.add(bat9)



    try:
        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id,message_id=mess.message_id,reply_markup=murkap)

        await state.update_data(text_but = massiv_text ) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but = massiv_url)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id,text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù',reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id,text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@dp.callback_query_handler(text='send_ras',state="*") # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    data = await state.get_data()
    mess = data['q'] # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try: #–ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_massiv = data['text_but']
        url_massiv = data['url_but']
        for t in text_massiv:
            for u in url_massiv:
                bat = types.InlineKeyboardButton(text=t, url=u)
                murkap.add(bat)
                break

    except: pass


    db = sqlite3.connect('server.db')
    sql = db.cursor()
    await state.finish()
    users = sql.execute("SELECT id FROM user_time WHERE finish_stat = '1'").fetchall()
    bad = 0
    good = 0
    await bot.send_message(call.message.chat.id, f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")
    for i in users:
        if int(cheak_black(id)) == 0:
            await asyncio.sleep(0.03)
            try:
                await mess.copy_to(i[0],reply_markup=murkap)
                good += 1
            except:
                bad += 1

    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> <code>{bad}</code>",
        parse_mode="html"
    )
#########################################################